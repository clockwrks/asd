var s=require("enmity"),h=require("enmity/api/storage"),b=require("enmity/api/toasts"),U=require("react");function F(r){return r&&typeof r=="object"&&"default"in r?r:{default:r}}var n=F(U);const{components:e}=window.enmity;e.Alert,e.Button,e.FlatList,e.Image,e.ImageBackground,e.KeyboardAvoidingView,e.Modal,e.Pressable,e.RefreshControl,e.ScrollView,e.SectionList,e.StatusBar,e.StyleSheet,e.Switch,e.Text,e.TextInput,e.TouchableHighlight,e.TouchableOpacity,e.TouchableWithoutFeedback,e.Touchable,e.View,e.VirtualizedList,e.Form,e.FormArrow,e.FormCTA,e.FormCTAButton,e.FormCardSection,e.FormCheckbox;const f=e.FormDivider;e.FormHint,e.FormIcon;const p=e.FormInput;e.FormLabel,e.FormRadio,e.FormRow;const v=e.FormSection;e.FormSelect,e.FormSubLabel;const w=e.FormSwitch;e.FormTernaryCheckBox;const S=e.FormText;e.FormTextColors,e.FormTextSizes;const I={active:!1,subjectUserId:"",targetUserId:""};let l,c,u,d;const T=async()=>{try{l=s.webpack.findByProps("getUser","getCurrentUser"),c=s.webpack.findByProps("getUserProfile"),u=s.webpack.findByProps("getPrimaryActivity","getStatus"),d=s.webpack.findByProps("getMember","getMembers")}catch(r){b.showToast({content:"Failed to load Discord stores. Imposter plugin will not function correctly.",duration:3e3}),console.error("Imposter Plugin Error:",r)}},y=r=>{if(!l||!c||!u||!d){b.showToast({content:"Could not find required Discord stores. Plugin will not be patched.",duration:3e3});return}s.patcher.after(l,"getUser",(i,a,o)=>{if(o&&a[0]===r.targetUserId){const t=l.getUser(r.subjectUserId);t&&Object.assign(o,{username:t.username,avatar:t.avatar,banner:t.banner,avatarDecorationData:t.avatarDecorationData,id:t.id,globalName:t.globalName,createdAt:t.createdAt})}}),s.patcher.after(c,"getUserProfile",(i,a,o)=>{if(o&&a[0]===r.targetUserId){const t=c.getUserProfile(r.subjectUserId);t&&Object.assign(o,{badges:t.badges,bio:t.bio,profileEffectId:t.profileEffectId,pronouns:t.pronouns,themeColor:t.themeColor})}}),s.patcher.after(c,"getMutualGuilds",(i,a,o)=>{if(a&&a[0]===r.targetUserId){const t=c.getMutualGuilds(r.subjectUserId);if(t)return t}}),s.patcher.after(u,"getPrimaryActivity",(i,a,o)=>{if(a&&a[0]===r.targetUserId){const t=u.getPrimaryActivity(r.subjectUserId);if(t)return t}}),s.patcher.after(d,"getMember",(i,a,o)=>{var t;if(o&&a&&a[1]===r.targetUserId){const g=d.getMember(a[0],r.subjectUserId),m=l.getUser(r.subjectUserId);m&&Object.assign(o,{nick:(t=g==null?void 0:g.nick)!=null?t:m.globalName})}})};class P extends s.Plugin{constructor(){super(...arguments),this.settings=I}async onStart(){await T(),await this.loadSettings(),this.settings.active&&y(this.settings)}onStop(){s.patcher.unpatchAll()}getSettingsPanel({}){const[i,a]=n.default.useState(this.settings),o=async t=>{this.settings=t,await h.storage.set(this.manifest.name,"settings",t),s.patcher.unpatchAll(),t.active&&y(t),a(t)};return n.default.createElement(v,{title:"Imposter Plugin Settings"},n.default.createElement(w,{note:"Enable or disable the plugin.",value:i.active,onChange:t=>{o({...i,active:t})}},"Enabled"),n.default.createElement(f,null),n.default.createElement(p,{placeholder:"User ID",label:"Subject User ID",note:"The user to copy the identity from.",value:i.subjectUserId,onChange:t=>{o({...i,subjectUserId:t})}}),n.default.createElement(p,{placeholder:"User ID",label:"Target User ID",note:"The user to apply the identity to.",value:i.targetUserId,onChange:t=>{o({...i,targetUserId:t})}}),n.default.createElement(f,null),n.default.createElement(S,null,"This plugin requires a restart of the Discord app to take full effect on user profiles and caches. It can be disabled by toggling the switch above."))}async loadSettings(){try{this.settings=await h.storage.get(this.manifest.name,"settings")}catch{this.settings=I}}}module.exports=P;
