var a=require("enmity"),g=require("enmity/api/storage"),p=require("components/settings"),h=require("react");function c(e){return e&&typeof e=="object"&&"default"in e?e:{default:e}}var u=c(p),m=c(h);const o={active:!1,targetUserId:""},l=a.webpack.findByProps("getMember","getMembers"),d=a.webpack.findByProps("getUser","getCurrentUser");class f extends a.Plugin{constructor(){super(...arguments),this.settings=o}async onStart(){console.log("NameChanger: Plugin starting..."),this.settings=await g.storage.get(this.manifest.name,"settings")||o,console.log("NameChanger: Loaded settings:",this.settings),this.settings.active&&this.settings.targetUserId&&this.applyPatch()}onStop(){console.log("NameChanger: Plugin stopping, unpatching all..."),a.patcher.unpatchAll()}applyPatch(){const t=d.getCurrentUser().id;console.log("NameChanger: Applying patch for user ID:",t);try{a.patcher.after(l,"getMember",(i,s,n)=>{if(n&&s&&s[1]===t){const r=l.getMember(s[0],this.settings.targetUserId);r&&(console.log(`NameChanger: Patching nickname from "${n.nick}" to "${r.nick}"`),Object.assign(n,{nick:r.nick}))}}),console.log("NameChanger: Patch applied successfully.")}catch(i){console.error("NameChanger: Failed to apply patch.",i)}}async saveAndApplySettings(t){this.settings=t,await g.storage.set(this.manifest.name,"settings",t),a.patcher.unpatchAll(),t.active&&t.targetUserId&&this.applyPatch()}getSettingsPanel(){return m.default.createElement(u.default,{initialSettings:this.settings,onSave:this.saveAndApplySettings.bind(this)})}}module.exports=f;
